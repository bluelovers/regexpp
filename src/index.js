"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const AST = require("./ast");
exports.AST = AST;
const parser_1 = require("./parser");
exports.RegExpParser = parser_1.RegExpParser;
const validator_1 = require("./validator");
exports.RegExpValidator = validator_1.RegExpValidator;
const visitor_1 = require("./visitor");
/**
 * Parse a given regular expression literal then make AST object.
 * @param source The source code to parse.
 * @param options The options to parse.
 * @returns The AST of the regular expression.
 */
function parseRegExpLiteral(source, options) {
    return new parser_1.RegExpParser(options).parseLiteral((source instanceof RegExp) ? source.toString() : source);
}
exports.parseRegExpLiteral = parseRegExpLiteral;
/**
 * Validate a given regular expression literal.
 * @param source The source code to validate.
 * @param options The options to validate.
 */
function validateRegExpLiteral(source, options) {
    return new validator_1.RegExpValidator(options).validateLiteral(source);
}
exports.validateRegExpLiteral = validateRegExpLiteral;
function visitRegExpAST(node, handlers) {
    new visitor_1.RegExpVisitor(handlers).visit(node);
}
exports.visitRegExpAST = visitRegExpAST;
exports.default = exports;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDZCQUE2QjtBQUtwQixrQkFBRztBQUpaLHFDQUF1QztBQUl6Qix1QkFKTCxxQkFBWSxDQUlLO0FBSDFCLDJDQUE2QztBQUdqQiwwQkFIbkIsMkJBQWUsQ0FHbUI7QUFGM0MsdUNBQXlDO0FBSXpDOzs7OztHQUtHO0FBQ0gsU0FBZ0Isa0JBQWtCLENBQzlCLE1BQXVCLEVBQ3ZCLE9BQThCO0lBRTlCLE9BQU8sSUFBSSxxQkFBWSxDQUFDLE9BQU8sQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDLE1BQU0sWUFBWSxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQTtBQUMxRyxDQUFDO0FBTEQsZ0RBS0M7QUFFRDs7OztHQUlHO0FBQ0gsU0FBZ0IscUJBQXFCLENBQ2pDLE1BQWMsRUFDZCxPQUFpQztJQUVqQyxPQUFPLElBQUksMkJBQWUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLENBQUE7QUFDL0QsQ0FBQztBQUxELHNEQUtDO0FBRUQsU0FBZ0IsY0FBYyxDQUMxQixJQUFjLEVBQ2QsUUFBZ0M7SUFFaEMsSUFBSSx1QkFBYSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUMzQyxDQUFDO0FBTEQsd0NBS0M7QUFFRCxrQkFBZSxPQUFtQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEFTVCA9IHJlcXVpcmUoXCIuL2FzdFwiKVxuaW1wb3J0IHsgUmVnRXhwUGFyc2VyIH0gZnJvbSBcIi4vcGFyc2VyXCJcbmltcG9ydCB7IFJlZ0V4cFZhbGlkYXRvciB9IGZyb20gXCIuL3ZhbGlkYXRvclwiXG5pbXBvcnQgeyBSZWdFeHBWaXNpdG9yIH0gZnJvbSBcIi4vdmlzaXRvclwiXG5cbmV4cG9ydCB7IEFTVCwgUmVnRXhwUGFyc2VyLCBSZWdFeHBWYWxpZGF0b3IgfVxuXG4vKipcbiAqIFBhcnNlIGEgZ2l2ZW4gcmVndWxhciBleHByZXNzaW9uIGxpdGVyYWwgdGhlbiBtYWtlIEFTVCBvYmplY3QuXG4gKiBAcGFyYW0gc291cmNlIFRoZSBzb3VyY2UgY29kZSB0byBwYXJzZS5cbiAqIEBwYXJhbSBvcHRpb25zIFRoZSBvcHRpb25zIHRvIHBhcnNlLlxuICogQHJldHVybnMgVGhlIEFTVCBvZiB0aGUgcmVndWxhciBleHByZXNzaW9uLlxuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VSZWdFeHBMaXRlcmFsKFxuICAgIHNvdXJjZTogc3RyaW5nIHwgUmVnRXhwLFxuICAgIG9wdGlvbnM/OiBSZWdFeHBQYXJzZXIuT3B0aW9ucyxcbik6IEFTVC5SZWdFeHBMaXRlcmFsIHtcbiAgICByZXR1cm4gbmV3IFJlZ0V4cFBhcnNlcihvcHRpb25zKS5wYXJzZUxpdGVyYWwoKHNvdXJjZSBpbnN0YW5jZW9mIFJlZ0V4cCkgPyBzb3VyY2UudG9TdHJpbmcoKSA6IHNvdXJjZSlcbn1cblxuLyoqXG4gKiBWYWxpZGF0ZSBhIGdpdmVuIHJlZ3VsYXIgZXhwcmVzc2lvbiBsaXRlcmFsLlxuICogQHBhcmFtIHNvdXJjZSBUaGUgc291cmNlIGNvZGUgdG8gdmFsaWRhdGUuXG4gKiBAcGFyYW0gb3B0aW9ucyBUaGUgb3B0aW9ucyB0byB2YWxpZGF0ZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlUmVnRXhwTGl0ZXJhbChcbiAgICBzb3VyY2U6IHN0cmluZyxcbiAgICBvcHRpb25zPzogUmVnRXhwVmFsaWRhdG9yLk9wdGlvbnMsXG4pOiB2b2lkIHtcbiAgICByZXR1cm4gbmV3IFJlZ0V4cFZhbGlkYXRvcihvcHRpb25zKS52YWxpZGF0ZUxpdGVyYWwoc291cmNlKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gdmlzaXRSZWdFeHBBU1QoXG4gICAgbm9kZTogQVNULk5vZGUsXG4gICAgaGFuZGxlcnM6IFJlZ0V4cFZpc2l0b3IuSGFuZGxlcnMsXG4pOiB2b2lkIHtcbiAgICBuZXcgUmVnRXhwVmlzaXRvcihoYW5kbGVycykudmlzaXQobm9kZSlcbn1cblxuZXhwb3J0IGRlZmF1bHQgZXhwb3J0cyBhcyB0eXBlb2YgaW1wb3J0KCcuL2luZGV4Jyk7XG4iXX0=